(* Modula-2 Collections Library
 *
 *  @file LIFO.def
 *  Stack interface
 *
 *  Universal Dynamic Stack
 *
 *  Author: Benjamin Kowarsch
 *
 *  Copyright (C) 2009 Benjamin Kowarsch. All rights reserved.
 *
 *  License:
 *
 *  Redistribution  and  use  in source  and  binary forms,  with  or  without
 *  modification, are permitted provided that the following conditions are met
 *
 *  1) NO FEES may be charged for the provision of the software.  The software
 *     may  NOT  be published  on websites  that contain  advertising,  unless
 *     specific  prior  written  permission has been obtained.
 *
 *  2) Redistributions  of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *
 *  3) Redistributions  in binary form  must  reproduce  the  above  copyright
 *     notice,  this list of conditions  and  the following disclaimer  in the
 *     documentation and other materials provided with the distribution.
 *
 *  4) Neither the author's name nor the names of any contributors may be used
 *     to endorse  or  promote  products  derived  from this software  without
 *     specific prior written permission.
 *
 *  5) Where this list of conditions  or  the following disclaimer, in part or
 *     as a whole is overruled  or  nullified by applicable law, no permission
 *     is granted to use the software.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO,  THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY  AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE  FOR  ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR
 * CONSEQUENTIAL  DAMAGES  (INCLUDING,  BUT  NOT  LIMITED  TO,  PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE,  DATA,  OR PROFITS; OR BUSINESS
 * INTERRUPTION)  HOWEVER  CAUSED  AND ON ANY THEORY OF LIABILITY,  WHETHER IN
 * CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *  
 *)


DEFINITION (* OF *) MODULE LIFO;

FROM Collections IMPORT Capacity, DataPtr, Status;


CONST

(* ---------------------------------------------------------------------------
 * Default stack size
 * ------------------------------------------------------------------------ *)

    defaultCapacity = 256;  (* 256 entries *)


(* ---------------------------------------------------------------------------
 * Maximum stack size
 * ------------------------------------------------------------------------ *)

    maximumCapacity = 1024*1024*1024;  (* more than 1 billion entries *)


(* ---------------------------------------------------------------------------
 * Synonyms for status codes
 * ------------------------------------------------------------------------ *)

    invalidStack = invalidCollection;
    stackEmpty = collectionEmpty;
    stackFull = collectionFull;


TYPE

(* ---------------------------------------------------------------------------
 * Opaque handle type:  LIFO.Stack
 * ------------------------------------------------------------------------ *)

    Stack; (* OPAQUE *)


(* ---------------------------------------------------------------------------
 * function:  LIFO.new( initialSize, status )
 * ---------------------------------------------------------------------------
 *
 * Creates  and  returns  a new LIFO stack object  with an initial capacity of
 * <initialSize>.  If  zero  is passed in  for <initialSize>,  then  the stack
 * will be created  with an  initial capacity  of  LIFO.defaultStackSize.  The
 * function fails  if a value greater than   LIFO.maximumStackSize  is  passed
 * in  for <initialSize> or if memory could not be allocated.
 *
 * The initial capacity of a stack is the number of entries that can be stored
 * in the stack without enlargement.
 *
 * The status of the operation  is passed back in <status>. *)

PROCEDURE new ( initialSize : Capacity; VAR status : Status ) : Stack;


(* ---------------------------------------------------------------------------
 * function:  LIFO.push( stack, value, status )
 * ---------------------------------------------------------------------------
 *
 * Adds a  new entry <value>  to the top of stack <stack>.  The  new entry  is
 * added by reference,  no data is copied.  However,  no entry is added if the
 * the stack is full,  that is  when the number of entries stored in the stack
 * has reached LIFO.maximumStackSize.  The function fails  if NIL is passed in
 * for <stack> or <value>,  or if memory could not be allocated.
 *
 * New entries are allocated dynamically  if the number of entries exceeds the
 * initial capacity of the stack.
 *
 * The status of the operation is passed back in <status>. *)

PROCEDURE push ( VAR stack : Stack; value : DataPtr; VAR status : Status );


(* ---------------------------------------------------------------------------
 * function:  LIFO.pop( stack, status )
 * ---------------------------------------------------------------------------
 *
 * Removes the top most value from stack <stack> and returns it.  If the stack
 * is empty,  that  is  when the  number  of  entries  stored in the stack has
 * reached zero,  then NIL is returned.
 *
 * Entries which were allocated dynamically (above the initial capacity) are
 * deallocated when their values are popped.
 *
 * The status of the operation  is passed back in <status>. *)

PROCEDURE pop ( VAR stack : Stack; VAR status : Status ) : DataPtr;


(* ---------------------------------------------------------------------------
 * function:  LIFO.capacity( stack )
 * ---------------------------------------------------------------------------
 *
 * Returns the current capacity of <stack>.  The current capacity is the total
 * number of allocated entries.  Returns zero if NIL is passed in for <stack>.
 *)
PROCEDURE capacity ( VAR stack : Stack ) : Capacity;


(* ---------------------------------------------------------------------------
 * function:  LIFO.entryCount( stack )
 * ---------------------------------------------------------------------------
 *
 * Returns  the  number of entries  stored in stack <stack>,  returns  zero if
 * NIL is passed in for <stack>. *)

PROCEDURE entryCount ( VAR stack : Stack ) : Capacity;


(* ---------------------------------------------------------------------------
 * function:  LIFO.isResizable( stack )
 * ---------------------------------------------------------------------------
 *
 * Returns TRUE  if the  capacity of <stack> can change after <stack> has been
 * instatiated,  returns FALSE otherwise. *)

PROCEDURE isResizable ( stack : Stack ) : BOOLEAN;


(* ---------------------------------------------------------------------------
 * function:  LIFO.dispose( stack )
 * ---------------------------------------------------------------------------
 *
 * Disposes of stack object <stack> and returns NIL. *)

PROCEDURE dispose ( VAR stack : Stack ) : Stack;


END LIFO.
